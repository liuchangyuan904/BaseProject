package com.common.project.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.common.project.entity.BuildingEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BUILDING_ENTITY".
*/
public class BuildingEntityDao extends AbstractDao<BuildingEntity, Long> {

    public static final String TABLENAME = "BUILDING_ENTITY";

    /**
     * Properties of entity BuildingEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BuildingName = new Property(1, String.class, "buildingName", false, "BUILDING_NAME");
        public final static Property BuildingNumber = new Property(2, String.class, "buildingNumber", false, "BUILDING_NUMBER");
        public final static Property BuildingDesc = new Property(3, String.class, "buildingDesc", false, "BUILDING_DESC");
        public final static Property Ids = new Property(4, String.class, "ids", false, "IDS");
    }


    public BuildingEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BuildingEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BUILDING_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"BUILDING_NAME\" TEXT," + // 1: buildingName
                "\"BUILDING_NUMBER\" TEXT," + // 2: buildingNumber
                "\"BUILDING_DESC\" TEXT," + // 3: buildingDesc
                "\"IDS\" TEXT);"); // 4: ids
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BUILDING_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BuildingEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String buildingName = entity.getBuildingName();
        if (buildingName != null) {
            stmt.bindString(2, buildingName);
        }
 
        String buildingNumber = entity.getBuildingNumber();
        if (buildingNumber != null) {
            stmt.bindString(3, buildingNumber);
        }
 
        String buildingDesc = entity.getBuildingDesc();
        if (buildingDesc != null) {
            stmt.bindString(4, buildingDesc);
        }
 
        String ids = entity.getIds();
        if (ids != null) {
            stmt.bindString(5, ids);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BuildingEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String buildingName = entity.getBuildingName();
        if (buildingName != null) {
            stmt.bindString(2, buildingName);
        }
 
        String buildingNumber = entity.getBuildingNumber();
        if (buildingNumber != null) {
            stmt.bindString(3, buildingNumber);
        }
 
        String buildingDesc = entity.getBuildingDesc();
        if (buildingDesc != null) {
            stmt.bindString(4, buildingDesc);
        }
 
        String ids = entity.getIds();
        if (ids != null) {
            stmt.bindString(5, ids);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BuildingEntity readEntity(Cursor cursor, int offset) {
        BuildingEntity entity = new BuildingEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // buildingName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // buildingNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // buildingDesc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // ids
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BuildingEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBuildingName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBuildingNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBuildingDesc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIds(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BuildingEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BuildingEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BuildingEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
