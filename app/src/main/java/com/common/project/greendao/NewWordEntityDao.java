package com.common.project.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.common.project.entity.NewWordEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEW_WORD_ENTITY".
*/
public class NewWordEntityDao extends AbstractDao<NewWordEntity, Long> {

    public static final String TABLENAME = "NEW_WORD_ENTITY";

    /**
     * Properties of entity NewWordEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property WordId = new Property(0, Long.class, "wordId", true, "_id");
        public final static Property Index = new Property(1, int.class, "index", false, "INDEX");
        public final static Property WordHead = new Property(2, String.class, "wordHead", false, "WORD_HEAD");
        public final static Property WordTrans = new Property(3, String.class, "wordTrans", false, "WORD_TRANS");
    }


    public NewWordEntityDao(DaoConfig config) {
        super(config);
    }
    
    public NewWordEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW_WORD_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: wordId
                "\"INDEX\" INTEGER NOT NULL ," + // 1: index
                "\"WORD_HEAD\" TEXT," + // 2: wordHead
                "\"WORD_TRANS\" TEXT);"); // 3: wordTrans
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW_WORD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewWordEntity entity) {
        stmt.clearBindings();
 
        Long wordId = entity.getWordId();
        if (wordId != null) {
            stmt.bindLong(1, wordId);
        }
        stmt.bindLong(2, entity.getIndex());
 
        String wordHead = entity.getWordHead();
        if (wordHead != null) {
            stmt.bindString(3, wordHead);
        }
 
        String wordTrans = entity.getWordTrans();
        if (wordTrans != null) {
            stmt.bindString(4, wordTrans);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewWordEntity entity) {
        stmt.clearBindings();
 
        Long wordId = entity.getWordId();
        if (wordId != null) {
            stmt.bindLong(1, wordId);
        }
        stmt.bindLong(2, entity.getIndex());
 
        String wordHead = entity.getWordHead();
        if (wordHead != null) {
            stmt.bindString(3, wordHead);
        }
 
        String wordTrans = entity.getWordTrans();
        if (wordTrans != null) {
            stmt.bindString(4, wordTrans);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NewWordEntity readEntity(Cursor cursor, int offset) {
        NewWordEntity entity = new NewWordEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // wordId
            cursor.getInt(offset + 1), // index
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // wordHead
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // wordTrans
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewWordEntity entity, int offset) {
        entity.setWordId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIndex(cursor.getInt(offset + 1));
        entity.setWordHead(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWordTrans(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NewWordEntity entity, long rowId) {
        entity.setWordId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NewWordEntity entity) {
        if(entity != null) {
            return entity.getWordId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewWordEntity entity) {
        return entity.getWordId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
